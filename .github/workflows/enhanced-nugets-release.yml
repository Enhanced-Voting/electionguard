name: Enhanced Nugets Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  TARGET: Release

jobs:
  get_version_code:
    name: Get Version Code
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version_code.outputs.version }}
      build_number: ${{ steps.get_version_code.outputs.build_number }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Get Version Code
        id: get_version_code
        run: |
          TAG_NAME=${GITHUB_REF/refs\/tags\//} # v1.0.0
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          BUILD_NUMBER=$(echo $TAG_NAME | grep -oP '\d+$')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          VERSION="${TAG_NAME/v}" #-$BUILD_NUMBER
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  linux_build_x64:
    name: Linux Build (x64)
    runs-on: ubuntu-22.04
    env:
      compiler: clang
      compiler_version: 14
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Update Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-${{ env.compiler_version }} g++-multilib
          echo "CC=clang-${{ env.compiler_version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ env.compiler_version }}" >> $GITHUB_ENV
      - name: Configure Environment
        run: make environment
      - name: Build
        run: make build-x64
      - name: Upload Library (x64)
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: |
            build/libs/Linux/x64/Release/src/*.so
            build/libs/Linux/x64/Release/libs/hacl/*.so

  windows_build_x64:
    name: Windows Build (x64)
    runs-on: windows-2022
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x
      - name: Setup Environment
        run: make environment
      - name: Build
        run: make build-x64
      - name: Upload Library (x64)
        uses: actions/upload-artifact@v4
        with:
          name: win-x64
          path: |
            build/libs/Windows/x64/Release/src/Release/*.dll
            build/libs/Windows/x64/Release/src/Release/*.exp
            build/libs/Windows/x64/Release/src/Release/*.lib
            build/libs/Windows/x64/Release/libs/hacl/Release/*.dll
            build/libs/Windows/x64/Release/libs/hacl/Release/*.exp
            build/libs/Windows/x64/Release/libs/hacl/Release/*.lib

  publish_nuget:
    name: Publish Nuget
    needs:
      [
        get_version_code,
        linux_build_x64,
        windows_build_x64,
      ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Environment
        run: make environment

      - name: Get Linux x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: build/libs/Linux/x64/Release

      - name: Get Windows x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: win-x64
          path: build/libs/Windows/x64/Release

      - name: Update version number
        run: dotnet cake ./scripts/build.cake -t AssignVersion --newVersion ${{needs.get_version_code.outputs.version}}

      - name: Build and Package ElectionGuard.Encryption
        working-directory: bindings/netstandard/ElectionGuard/ElectionGuard.Encryption
        run: |
          dotnet build -c Release
          dotnet pack -c Release --version-suffix ${{needs.get_version_code.outputs.build_number}}

      - name: Build and Package ElectionGuard.ElectionSetup
        working-directory: bindings/netstandard/ElectionGuard/ElectionGuard.ElectionSetup
        run: |
          dotnet build -c Release
          dotnet pack -c Release --version-suffix ${{needs.get_version_code.outputs.build_number}}

      - name: Build and Package ElectionGuard.Decryption
        working-directory: bindings/netstandard/ElectionGuard/ElectionGuard.Decryption
        run: |
          dotnet build -c Release
          dotnet pack -c Release --version-suffix ${{needs.get_version_code.outputs.build_number}}

      - name: Setup Private Nuget Feed
        run: dotnet nuget add source https://pkgs.dev.azure.com/enhancedvoting/89e3a23c-f720-49d6-a79d-2033288a6017/_packaging/4e18252f-176a-7e3d-bfdb-c1525470b0d7/nuget/v3/index.json -n EV -u GithubActions -p ${{ secrets.EV_ADO_PAT }} --store-password-in-clear-text

      - name: Publish Enhanced.ElectionGuard.Encryption to Private Feed
        working-directory: bindings/netstandard/ElectionGuard/ElectionGuard.Encryption
        run: dotnet nuget push "**/*.nupkg" --api-key GithubActions --source EV --skip-duplicate

      - name: Publish Enhanced.ElectionGuard.ElectionSetup to Private Feed
        working-directory: bindings/netstandard/ElectionGuard/ElectionGuard.ElectionSetup
        run: dotnet nuget push "**/*.nupkg" --api-key GithubActions --source EV --skip-duplicate

      - name: Publish Enhanced.ElectionGuard.Decryption to Private Feed
        working-directory: bindings/netstandard/ElectionGuard/ElectionGuard.Decryption
        run: dotnet nuget push "**/*.nupkg" --api-key GithubActions --source EV --skip-duplicate

  publish_release:
    name: Publish Release
    needs: [get_version_code, publish_nuget]
    runs-on: ubuntu-22.04
    steps:
      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{needs.get_version_code.outputs.version}}
          tag_name: ${{needs.get_version_code.outputs.version}}
          draft: true
          prerelease: false
          #TODO: changelog, artifacts
